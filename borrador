import tkinter as tk
from tkinter import messagebox
from tkinter import simpledialog
import csv
from datetime import datetime

CITAS_FILE = 'citas.csv'

def guardar_cita(nombre, doctor, fecha, hora):
    with open(CITAS_FILE, 'a', newline='', encoding='utf-8') as f:
        escritor = csv.writer(f)
        escritor.writerow([nombre, doctor, fecha, hora])
    messagebox.showinfo("Cita guardada", "La cita ha sido agendada correctamente.")
    limpiar_campos()

def limpiar_campos():
    entry_nombre.delete(0, tk.END)
    entry_doctor.delete(0, tk.END)
    entry_fecha.delete(0, tk.END)
    entry_hora.delete(0, tk.END)

def cargar_citas():
    try:
        with open(CITAS_FILE, 'r', encoding='utf-8') as f:
            lector = csv.reader(f)
            return list(lector)
    except FileNotFoundError:
        return []

def guardar_todas_las_citas(citas):
    with open(CITAS_FILE, 'w', newline='', encoding='utf-8') as f:
        escritor = csv.writer(f)
        escritor.writerows(citas)

def eliminar_cita_seleccionada(listbox_citas, ventana_citas):
    seleccion = listbox_citas.curselection()
    if not seleccion:
        messagebox.showwarning("Ninguna selección", "Por favor, selecciona una cita para eliminar.")
        return

    indice_a_eliminar = seleccion[0]
    
    if messagebox.askyesno("Confirmar eliminación", "¿Estás seguro de que quieres eliminar esta cita?"):
        citas_existentes = cargar_citas()
        if 0 <= indice_a_eliminar < len(citas_existentes):
            del citas_existentes[indice_a_eliminar]
            guardar_todas_las_citas(citas_existentes)
            messagebox.showinfo("Cita eliminada", "La cita ha sido eliminada correctamente.")
            ventana_citas.destroy()
            ver_citas()
        else:
            messagebox.showerror("Error", "Índice de cita no válido.")

def ver_citas():
    ventana_citas = tk.Toplevel(ventana)
    ventana_citas.title("Citas Agendadas")
    ventana_citas.geometry("500x400")

    citas = cargar_citas()

    if not citas:
        tk.Label(ventana_citas, text="No hay citas agendadas.").pack(pady=20)
        return

    frame_citas = tk.Frame(ventana_citas)
    frame_citas.pack(pady=10, fill=tk.BOTH, expand=True)

    scrollbar = tk.Scrollbar(frame_citas, orient=tk.VERTICAL)
    listbox_citas = tk.Listbox(frame_citas, yscrollcommand=scrollbar.set, width=60, height=15)
    scrollbar.config(command=listbox_citas.yview)

    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
    listbox_citas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

    for i, cita in enumerate(citas):
        listbox_citas.insert(tk.END, f"{i+1}. Nombre: {cita[0]}, Doctor: {cita[1]}, Fecha: {cita[2]}, Hora: {cita[3]}")

    tk.Button(ventana_citas, text="Eliminar Cita Seleccionada", command=lambda: eliminar_cita_seleccionada(listbox_citas, ventana_citas), bg="salmon").pack(pady=10)

def agendar():
    nombre = entry_nombre.get().strip()
    doctor = entry_doctor.get().strip()
    fecha = entry_fecha.get().strip()
    hora = entry_hora.get().strip()

    if not nombre or not doctor or not fecha or not hora:
        messagebox.showwarning("Campos Incompletos", "Por favor, llena todos los campos.")
        return

    try:
        datetime.strptime(fecha, "%d/%m/%Y")
    except ValueError:
        messagebox.showerror("Formato de Fecha Incorrecto", "La fecha debe estar en formato DD/MM/AAAA (ej. 31/12/2023).")
        return

    try:
        datetime.strptime(hora, "%H:%M")
    except ValueError:
        messagebox.showerror("Formato de Hora Incorrecto", "La hora debe estar en formato HH:MM (ej. 14:30).")
        return

    guardar_cita(nombre, doctor, fecha, hora)

ventana = tk.Tk()
ventana.title("Agenda de Citas Hospitalarias")
ventana.geometry("400x380")
ventana.resizable(False, False)

menubar = tk.Menu(ventana)
ventana.config(menu=menubar)

opciones_menu = tk.Menu(menubar, tearoff=0)
menubar.add_cascade(label="Opciones", menu=opciones_menu)
opciones_menu.add_command(label="Agendar Nueva Cita", command=lambda: ventana.lift())
opciones_menu.add_command(label="Ver Citas Agendadas", command=ver_citas)
opciones_menu.add_separator()
opciones_menu.add_command(label="Salir", command=ventana.quit)

tk.Label(ventana, text="Nombre del Paciente:", font=('Arial', 10, 'bold')).pack(pady=(10,0))
entry_nombre = tk.Entry(ventana, width=30, bd=2, relief="groove")
entry_nombre.pack(pady=5)

tk.Label(ventana, text="Nombre del Doctor:", font=('Arial', 10, 'bold')).pack(pady=(5,0))
entry_doctor = tk.Entry(ventana, width=30, bd=2, relief="groove")
entry_doctor.pack(pady=5)

tk.Label(ventana, text="Fecha (DD/MM/AAAA):", font=('Arial', 10, 'bold')).pack(pady=(5,0))
entry_fecha = tk.Entry(ventana, width=30, bd=2, relief="groove")
entry_fecha.pack(pady=5)

tk.Label(ventana, text="Hora (HH:MM):", font=('Arial', 10, 'bold')).pack(pady=(5,0))
entry_hora = tk.Entry(ventana, width=30, bd=2, relief="groove")
entry_hora.pack(pady=5)

tk.Button(ventana, text="Agendar Cita", command=agendar, bg="lightgreen", fg="black", font=('Arial', 10, 'bold'), relief="raised", bd=3).pack(pady=15)
tk.Button(ventana, text="Ver Citas Agendadas", command=ver_citas, bg="lightblue", fg="black", font=('Arial', 10, 'bold'), relief="raised", bd=3).pack(pady=5)

ventana.mainloop()
