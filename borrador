import tkinter as tk
from tkinter import messagebox
import ttkbootstrap as ttk
from ttkbootstrap.constants import *
import csv
from datetime import datetime

CITAS_FILE = 'citas.csv'
APP_TITLE = "Sistema de Gestión de Citas Médicas"

def guardar_cita(nombre, doctor_o_motivo, fecha, hora):
    with open(CITAS_FILE, 'a', newline='', encoding='utf-8') as f:
        escritor = csv.writer(f)
        escritor.writerow([nombre, doctor_o_motivo, fecha, hora])
    messagebox.showinfo("Cita Agendada", "¡La cita ha sido agendada con éxito!")
    limpiar_campos()

def limpiar_campos():
    entry_nombre.delete(0, tk.END)
    combobox_doctor_motivo.set('Selecciona o escribe el motivo...')
    entry_fecha.delete(0, tk.END)
    entry_hora.delete(0, tk.END)

def cargar_citas():
    try:
        with open(CITAS_FILE, 'r', encoding='utf-8') as f:
            lector = csv.reader(f)
            return list(lector)
    except FileNotFoundError:
        return []

def guardar_todas_las_citas(citas):
    with open(CITAS_FILE, 'w', newline='', encoding='utf-8') as f:
        escritor = csv.writer(f)
        escritor.writerows(citas)

def eliminar_cita_seleccionada(listbox_citas, ventana_citas):
    seleccion = listbox_citas.curselection()
    if not seleccion:
        messagebox.showwarning("Nada Seleccionado", "Por favor, elige una cita de la lista para eliminar.")
        return

    indice_a_eliminar = seleccion[0]
    
    if messagebox.askyesno("Confirmar Cancelación", "¿Estás seguro de que quieres cancelar esta cita? ¡Esta acción es irreversible!"):
        citas_existentes = cargar_citas()
        if 0 <= indice_a_eliminar < len(citas_existentes):
            del citas_existentes[indice_a_eliminar]
            guardar_todas_las_citas(citas_existentes)
            messagebox.showinfo("Cita Cancelada", "La cita ha sido cancelada satisfactoriamente.")
            ventana_citas.destroy()
            ver_citas()
        else:
            messagebox.showerror("Error Interno", "No se pudo encontrar la cita. Por favor, inténtalo de nuevo.")

def ver_citas():
    ventana_citas = tk.Toplevel(ventana)
    ventana_citas.title("Tus Citas Agendadas")
    ventana_citas.geometry("700x500")
    ventana_citas.resizable(True, True)

    citas = cargar_citas()

    if not citas:
        tk.Label(ventana_citas, text="¡Vaya! Parece que no tienes citas agendadas aún.", 
                 font=('Arial', 14, 'italic'), fg="gray").pack(pady=50, padx=20)
        return

    frame_list_container = ttk.Frame(ventana_citas, bootstyle="light", padding=5)
    frame_list_container.pack(pady=15, padx=20, fill=BOTH, expand=TRUE)

    scrollbar = ttk.Scrollbar(frame_list_container, orient=VERTICAL)
    listbox_citas = tk.Listbox(frame_list_container, yscrollcommand=scrollbar.set, 
                               font=('Consolas', 11), selectmode=SINGLE, 
                               bd=1, relief="solid",
                               selectbackground=PRIMARY, selectforeground="white")
    scrollbar.config(command=listbox_citas.yview)

    scrollbar.pack(side=RIGHT, fill=Y)
    listbox_citas.pack(side=LEFT, fill=BOTH, expand=TRUE)

    listbox_citas.insert(END, f"{'Paciente':<20} {'Motivo/Doctor':<25} {'Fecha':<15} {'Hora':<10}")
    listbox_citas.insert(END, "-"*70)
    
    for i, cita in enumerate(citas):
        listbox_citas.insert(END, f"{cita[0]:<20} {cita[1]:<25} {cita[2]:<15} {cita[3]:<10}")
    
    ttk.Button(ventana_citas, text="Cancelar Cita Seleccionada", 
               command=lambda: eliminar_cita_seleccionada(listbox_citas, ventana_citas), 
               bootstyle="danger").pack(pady=15)

def agendar():
    nombre = entry_nombre.get().strip()
    doctor_o_motivo = combobox_doctor_motivo.get().strip()
    fecha = entry_fecha.get().strip()
    hora = entry_hora.get().strip()

    if not nombre or not doctor_o_motivo or not fecha or not hora:
        messagebox.showwarning("Campos Requeridos", "¡Ups! Por favor, asegúrate de llenar todos los campos para agendar tu cita.")
        return

    try:
        datetime.strptime(fecha, "%d/%m/%Y")
    except ValueError:
        messagebox.showerror("Fecha Inválida", "El formato de la fecha es incorrecto. Usa DD/MM/AAAA (ej. 31/12/2025).")
        return

    try:
        datetime.strptime(hora, "%H:%M")
    except ValueError:
        messagebox.showerror("Hora Inválida", "El formato de la hora es incorrecto. Usa HH:MM (ej. 14:30).")
        return

    guardar_cita(nombre, doctor_o_motivo, fecha, hora)

ventana = ttk.Window(themename='flatly')
ventana.title(APP_TITLE)
ventana.geometry("500x600")
ventana.resizable(False, False)

menubar = tk.Menu(ventana, tearoff=0)
ventana.config(menu=menubar)

opciones_menu = tk.Menu(menubar, tearoff=0)
menubar.add_cascade(label="Opciones", menu=opciones_menu)
opciones_menu.add_command(label="Agendar Nueva Cita", command=lambda: ventana.lift())
opciones_menu.add_command(label="Ver Citas Agendadas", command=ver_citas)
opciones_menu.add_separator()
opciones_menu.add_command(label="Salir", command=ventana.quit)

main_frame = ttk.Frame(ventana, padding=30)
main_frame.pack(expand=TRUE, fill=BOTH)

ttk.Label(main_frame, text="Agenda tu Próxima Cita Médica", 
         font=('Arial', 20, 'bold')).grid(row=0, column=0, columnspan=2, pady=(0, 25))

ttk.Label(main_frame, text="Nombre del Paciente:").grid(row=1, column=0, sticky="w", pady=(10, 2))
entry_nombre = ttk.Entry(main_frame)
entry_nombre.grid(row=2, column=0, columnspan=2, sticky="ew", padx=0, pady=(0, 15))

ttk.Label(main_frame, text="Motivo de la Cita / Especialidad:").grid(row=3, column=0, sticky="w", pady=(10, 2))
MOTIVOS_CITAS = [
    "Consulta General", "Odontología", "Pediatría", "Ginecología", "Cardiología",
    "Dermatología", "Oftalmología", "Otorrinolaringología", "Traumatología",
    "Psicología", "Nutrición", "Fisioterapia", "Revisión de Rutina",
    "Seguimiento de Tratamiento", "Vacunación", "Urgencia Menor", "Otro"
]
combobox_doctor_motivo = ttk.Combobox(main_frame, values=MOTIVOS_CITAS)
combobox_doctor_motivo.set("Selecciona o escribe el motivo...")
combobox_doctor_motivo.grid(row=4, column=0, columnspan=2, sticky="ew", padx=0, pady=(0, 15))

ttk.Label(main_frame, text="Fecha de la Cita (DD/MM/AAAA):").grid(row=5, column=0, sticky="w", pady=(10, 2))
entry_fecha = ttk.Entry(main_frame)
entry_fecha.grid(row=6, column=0, columnspan=2, sticky="ew", padx=0, pady=(0, 15))

ttk.Label(main_frame, text="Hora de la Cita (HH:MM):").grid(row=7, column=0, sticky="w", pady=(10, 2))
entry_hora = ttk.Entry(main_frame)
entry_hora.grid(row=8, column=0, columnspan=2, sticky="ew", padx=0, pady=(0, 25))

ttk.Button(main_frame, text="Agendar Nueva Cita", command=agendar, bootstyle="primary").grid(row=9, column=0, columnspan=2, pady=10, sticky="ew")
ttk.Button(main_frame, text="Ver Todas las Citas", command=ver_citas, bootstyle="info").grid(row=10, column=0, columnspan=2, pady=5, sticky="ew")

main_frame.grid_columnconfigure(0, weight=1)
main_frame.grid_columnconfigure(1, weight=1)

ventana.mainloop()
